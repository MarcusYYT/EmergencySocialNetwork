doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
  link(rel='stylesheet' type='text/css' href='/stylesheets/index.css')
  script(src='/javascripts/posts.js')
  title Threads
.links
  a.btn.btn-primary(onclick='routeToDirectory()') Back
#post-wrapper
  h2#message-header Threads
  #thread-board.list-group
    button#thread-btn.btn.btn-primary(type='button' onclick='showCreateThreadOverlay()') Create Thread

   
#overlayForTest(style='display: none;')
  p Currently Speed Testing... 
  p Don't Close the Browser Tab...
script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

  const socket = io();
  socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
  })
  let username = "";
  let status = "";

  function routeToDirectory(){
    const user_id = #{user_id}
    window.location.href = `/directory/${user_id}`
  }

  function createGroupNameWrapper(){
    let threadNameWrapper = document.createElement("div")
    threadNameWrapper.setAttribute("id", "threadNameWrapper")
    let threadNameLabel = document.createElement("label")
    threadNameLabel.setAttribute("id", "threadNameLabel")
    let threadNameLabelText = document.createTextNode("Thread Topic")
    threadNameLabel.appendChild(threadNameLabelText)
    let threadNameInput = document.createElement("input")
    threadNameInput.setAttribute("id", "threadNameInput")
    threadNameInput.setAttribute("type", "text")
    threadNameWrapper.appendChild(threadNameLabel)
    threadNameWrapper.appendChild(threadNameInput)
    return threadNameWrapper
  }

  function createUrgencyWrapper(){
    let urgencyWrapper = document.createElement("div")
    urgencyWrapper.setAttribute("id", "urgencyWrapper")
    let urgencySelect = document.createElement("select")
    urgencySelect.setAttribute("id", "urgencySelect")
    let urgencyLabel = document.createElement("label")
    urgencyLabel.setAttribute("id", "urgencyLabel")
    let urgencyLabelText =  document.createTextNode("Urgency Level:")
    urgencyLabel.appendChild(urgencyLabelText)
    urgencyWrapper.appendChild(urgencyLabel)
    let urgencyHigh = document.createElement("option")
    urgencyHigh.setAttribute("value", "High Priority")
    let urgencyHighText = document.createTextNode("High Priority")
    urgencyHigh.appendChild(urgencyHighText)
    let urgencyNormal = document.createElement("option")
    urgencyNormal.setAttribute("value", "Normal Priority")
    let urgencyNormalText = document.createTextNode("Normal Priority")
    urgencyNormal.appendChild(urgencyNormalText)
    let urgencyLow = document.createElement("option")
    urgencyLow.setAttribute("value", "Low Priority")
    let urgencyLowText = document.createTextNode("Low Priority")
    urgencyLow.appendChild(urgencyLowText)
    urgencySelect.appendChild(urgencyHigh)
    urgencySelect.appendChild(urgencyNormal)
    urgencySelect.appendChild(urgencyLow)
    urgencyWrapper.appendChild(urgencySelect)
    return urgencyWrapper
  }

  function createButttonWrapper(){
    let buttonWrapper = document.createElement("div")
    buttonWrapper.setAttribute("id", "buttonWrapper")

    let createThreadButton = document.createElement("button")
    createThreadButton.setAttribute("value", "urgencyHigh")
    let createThreadButtonText = document.createTextNode("Create Thread")
    createThreadButton.appendChild(createThreadButtonText)
    createThreadButton.addEventListener("click", () => {createThread()})

    let cancelButton = document.createElement("button")
    let cancelButtonText = document.createTextNode("Cancel")
    cancelButton.appendChild(cancelButtonText)

    cancelButton.addEventListener("click", () => {removeCreateOverlay()})

    buttonWrapper.appendChild(cancelButton)
    buttonWrapper.appendChild(createThreadButton)
    return buttonWrapper
  }

  function showCreateThreadOverlay(){
    let threadOverlay = document.createElement("div")
    threadOverlay.setAttribute("id", "overlay")
    let body = document.getElementsByTagName("body")[0]
    let postWrapper = document.getElementById("post-wrapper")

    let createModal = document.createElement("div")
    createModal.setAttribute("id", "createModal")
    let createHeader = document.createElement("h2")
    createHeader.setAttribute("id", "createHeader")
    createHeader.appendChild(document.createTextNode("Create Thread"))

    let threadNameWrapper = createGroupNameWrapper();
    let urgencyWrapper = createUrgencyWrapper();
    let buttonWrapper = createButttonWrapper();

    createModal.appendChild(createHeader)
    createModal.appendChild(threadNameWrapper)
    createModal.appendChild(urgencyWrapper)
    createModal.appendChild(buttonWrapper)

    body.insertBefore(threadOverlay, postWrapper)
    body.insertBefore(createModal, postWrapper)
  }

  function removeCreateOverlay(){
    document.getElementById("overlay").remove();
    document.getElementById("createModal").remove();
  }

  async function createThread(){
    let threadInput = document.getElementById("threadNameInput")
    let threadName = threadInput.value

    let urgencySelect = document.getElementById("urgencySelect")
    let urgency = urgencySelect.value

    console.log("urgency is: " + urgency)
    console.log("urgency is: " + threadName)

    // Get the user_id (assuming it's the last part of the URL)

    let userId = #{user_id}

    console.log("userId is " + userId)

    const threadData = {
      username: username,
      creator_id: userId,
      thread_name: threadName,
      urgency: urgency
    };

    await fetch('/threads', {
          method: 'POST',
          headers: {
              'Content-Type': 'application/json',
          },
          body: JSON.stringify(threadData)})
          .then(response => response.json())
          .then(data => {
              console.log(data);
          })
          .catch(error => {
              console.error('Error fetching data:', error);
          });
  }

    function filterStopWords(userInput){
        const stopWords = [
          "a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be",
          "because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every",
          "for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in",
          "into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither",
          "no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she",
          "should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis",
          "to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why",
          "will","with","would","yet","you","your"
        ];

        let userInputWordArray = userInput.split(/\s+/);

        let filteredInput = userInput;

        for (word of userInputWordArray) {
          if (stopWords.includes(word)) {
              filteredInput = filteredInput.replace(word, "")
          } 
        }

        return filteredInput;
    }

    //- async function submitSearch() {
    //-     event.preventDefault()

    //-     let searchInput = document.getElementsByClassName('search-input')[0];
    //-     let searchValue = searchInput.value;

    //-     let filteredSearchValue = filterStopWords(searchValue)

    //-     if(filteredSearchValue !== ""){
    //-         await fetch(`/search?q=${filteredSearchValue}&domain=Posts`, {
    //-         method: 'GET',
    //-         headers: {
    //-             'Content-Type': 'application/json',
    //-         }
    //-         }).then(response => response.json()).then(async (data) => {
    //-             console.log("Data in response::")
    //-             console.log(data.data);
    //-             isStatus = false;
    //-             renderSearchedPosts(data.data, false, false)
    //-         }).catch(error => {
    //-             console.error(error);
    //-         })
    //-     }
    //-     else{
    //-         renderEmptyMessage();
    //-     }
    //- }

    //- async function searchFinished(){

    //-         let searchInput = document.getElementsByClassName('search-input')[0];
    //-         let searchValue = searchInput.value;

    //-         if (searchValue === ""){
    //-         await fetch('/posts')
    //-             .then(response => response.json())
    //-             .then(data => {
    //-                 console.log(data);
    //-                 renderChats(data.data, false)
    //-             })
    //-             .catch(error => {
    //-                 console.error('Error fetching data:', error);
    //-             });
    //-         }
    //-     }

  window.onload = async function() {
    const userId = #{user_id}
    const response = await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      username = data.data[0].username;
      status = data.data[0].status
    })

    await fetch('/threads')
        .then(response => response.json())
        .then(data => {
            console.log(data);
            renderThreads(data.data)
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
  }

  async function logout(){
    const userId = #{user_id};
    const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
    }

    await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
  }

  socket.on("postData", (postData) => {
    let messageBoard = document.getElementById("message-board")
    let msgData = {
        sender: postData.username,
        message: postData.content,
        status: postData.status,
        dateTime: postData.dateTime
    }    
    let messageElement = constructChatMessage(msgData);
    messageBoard.appendChild(messageElement);
    document.getElementById("message-board").scrollTop = messageBoard.scrollHeight;
  });

  function showOverlay() {
    document.getElementById('overlayForTest').style.display = 'flex';
  }

  function hideOverlay() {
    document.getElementById('overlayForTest').style.display = 'none';
  }

  socket.on("testMode", () => {
        showOverlay();
  });

  socket.on("testFinish", () => {
        hideOverlay();
  });
  
  
