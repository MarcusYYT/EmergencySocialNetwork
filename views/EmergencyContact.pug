html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/index.css')
    script(src='/javascripts/emergencyContact.js')
    script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js")
    title Emergency Contact 
  body
    .navbar.container
      a.btn.btn-primary(onclick='routeToDirectory()') Back
    #emergency-wrapper
      h1#emergency-header My Contact
      form#primary-contact-form(method='put')
        h2 Primary Contact
        input(type='text', name='primary', value='', placeholder='New Contact' required='')
        button.btn.btn-primary(type='button' onclick='changePrimaryContact()') Save
      form#alternative-contact-form(method='put')
        h2 Alternative Contact
        input(type='text', name='alternative', value='', placeholder='New Contact' required='')
        button.btn.btn-primary(type='button' onclick='changeAlternativeContact()') Save
      form#emergency-message-form(method='put')
        h2 Message
        textarea#emergency-message(placeholder='Type your personalized emergency message here...' required='')
        button.btn.btn-primary(type='button' onclick='changeEmergencyMessage()') Save
    

script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

    const socket = io();
    let username = '';
    let userId = '';
    let primary_id = '';
    let alternative_id = '';
    let primary_username = '';
    let alternative_username = '';
    let emergency_message = '';

    socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
    })

    window.onload = async function() {
        userId = #{user_id}
        console.log("Current user id is: " + userId);
        const response = await fetch(`/emergencyContacts/${userId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(response => response.json()).then((data) => {
            primary_id = data.data[0][0].primary_contact_id
            alternative_id = data.data[0][0].alternative_contact_id
            emergency_message = data.data[0][0].emergency_message;
        })
        const primaryResponse = await fetch(`/users/${primary_id}`, {
            method: 'GET',
            headers: {
            'Content-Type': 'application/json',
        },
        }).then(response => response.json()).then((data) => {
            primary_username = data.data[0].username;
        })
        const alternativeResponse = await fetch(`/users/${alternative_id}`, {
            method: 'GET',
            headers: {
            'Content-Type': 'application/json',
        },
        }).then(response => response.json()).then((data) => {            
            alternative_username = data.data[0].username;
            renderEmergencyContact(primary_username, alternative_username, emergency_message);
        })
      }

    async function changePrimaryContact() {
        const userId = #{user_id};
        let primaryId = '';
        let primaryForm = document.getElementById('primary-contact-form');
        primary_username = primaryForm.primary.value.trim();
        primaryForm.querySelector('[name="primary"]').value = ''; // Reset input value

        const response = await fetch(`/users/username/${primary_username}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (response.ok) {
            const data = await response.json();
            primaryId = data.data[0][0].user_id;
            console.log(primaryId); 
        } else {
            console.error('Failed to fetch user data');
        }

        const requestBody = {
            user_id: userId,
            updateAt: "primary_contact_id",
            updateValue: primary_username,
            updateId: primaryId
        }

        const updatePrimary = await fetch(`/emergencyContacts/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
            })
        renderEmergencyContact(primary_username, alternative_username, emergency_message);
    }

    async function changeAlternativeContact() {
        const userId = #{user_id};
        let alternativeId = ';'
        let alternativeForm = document.getElementById('alternative-contact-form');
        alternative_username = alternativeForm.alternative.value.trim();
        alternativeForm.value = '';
        alternativeForm.querySelector('[name="alternative"]').value = ''; // Reset input value


        const response = await fetch(`/users/username/${alternative_username}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (response.ok) {
            const data = await response.json();
            alternativeId = data.data[0][0].user_id;
            console.log(alternativeId); 
        } else {
            console.error('Failed to fetch user data');
        }

        const requestBody = {
            user_id: userId,
            updateAt: "alternative_contact_id",
            updateValue: alternative_username,
            updateId: alternativeId
        }

        const updateAlternative = await fetch(`/emergencyContacts/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
            })

        renderEmergencyContact(primary_username, alternative_username, emergency_message);
    }

    async function changeEmergencyMessage() {
        const userId = #{user_id};
        let messageArea = document.getElementById("emergency-message");
        emergency_message = messageArea.value;
        messageArea.value = '';

        const requestBody = {
            user_id: userId,
            updateAt: "emergency-message",
            updateValue: emergency_message
        }

        const updateMessage = await fetch(`/emergencyContacts/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
            })

        renderEmergencyContact(primary_username, alternative_username, emergency_message);
    }

    function routeToDirectory() {
        const user_id = #{user_id}
        window.location.href = `/directory/${user_id}`
    }

    //- async function createEmergencyContact() {
    //-     const postData = {
    //-         user_id: userId,
    //-         primary_id: 1,
    //-         alternative_id: 2,
    //-         emergency_message: 'I need HELP!'
    //-     };

    //-     await fetch('/emergencyContacts', {
    //-         method: 'POST',
    //-         headers: {
    //-             'Content-Type': 'application/json',
    //-         },
    //-         body: JSON.stringify(postData)})
    //-         .then(response => response.json())
    //-         .then(data => {
    //-             console.log(data);
    //-         })
    //-         .catch(error => {
    //-             console.error('Error fetching data:', error);
    //-         });
    //- }
