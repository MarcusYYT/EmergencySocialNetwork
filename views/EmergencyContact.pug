doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/index.css')
    script(src='/javascripts/emergencyContact.js')
    script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js")
    title Emergency Contact
  body.bg-light
    // Navigation Bar
    nav.navbar.navbar-expand-lg.navbar-light.bg-white.shadow-sm.mb-4
      .container
        a.btn.btn-outline-primary(onclick='routeToDirectory()')
          i.fas.fa-arrow-left.me-2
          | Back to Directory

    .container.py-3
      .row.justify-content-center
        .col-lg-8.mx-auto
          // Emergency Contact Card
          .card.shadow-sm.border-0.rounded-3.mb-4
            .card-header.bg-white.border-0.py-3
              h5.mb-0.fw-bold.text-primary
                i.fas.fa-ambulance.me-2
                | Emergency Contacts
            
            .card-body.p-4
              // Primary Contact Form
              form#primary-contact-form.mb-4(method='put')
                h5.mb-3.text-dark Primary Contact
                .input-group.mb-3
                  input#primary-input.form-control(type='text', name='primary', value='', placeholder='New Contact' required='')
                  button#primary-button.btn.btn-primary(type='button' onclick='changePrimaryContact()')
                    i.fas.fa-save.me-2
                    | Save
              
              // Alternative Contact Form
              form#alternative-contact-form.mb-4(method='put')
                h5.mb-3.text-dark Alternative Contact
                .input-group.mb-3
                  input#alternative-input.form-control(type='text', name='alternative', value='', placeholder='New Contact' required='')
                  button#alternative-button.btn.btn-primary(type='button' onclick='changeAlternativeContact()')
                    i.fas.fa-save.me-2
                    | Save
              
              // Emergency Message Form
              form#emergency-message-form.mb-4(method='put')
                h5.mb-3.text-dark Emergency Message
                .mb-3
                  textarea#emergency-message.form-control(rows='4', placeholder='Type your personalized emergency message here...' required='')
                .d-grid
                  button#message-button.btn.btn-primary(type='button' onclick='changeEmergencyMessage()')
                    i.fas.fa-save.me-2
                    | Save Message
              
              // Location Sharing Form
              form#location-form.mb-4
                h5.mb-3.text-dark Location Sharing
                p#location-sharing-text.mb-3 Allow location sharing?
                .mb-3
                  .form-check.form-check-inline
                    input#location-yes.form-check-input(type='radio', name='location', value='yes', onclick='getLocation()')
                    label.form-check-label(for='location-yes') YES
                  .form-check.form-check-inline
                    input#location-no.form-check-input(type='radio', name='location', value='no', onclick='disableLocationSharing()')
                    label.form-check-label(for='location-no') NO
                .d-grid
                  button#location-button.btn.btn-primary(type='button' onclick='changeLocationPermission()')
                    i.fas.fa-save.me-2
                    | Save Preference

    // Testing Overlay
    #overlayForTest.position-fixed.top-0.start-0.w-100.h-100.bg-dark.d-none.justify-content-center.align-items-center.text-white(style='opacity: 0.9; z-index: 2000;')
      .text-center.p-4
        .spinner-border.text-light.mb-3(role='status')
        p.h5 Currently Speed Testing... 
        p Don't Close the Browser Tab...

script.
    const socket = io();
    let username = '';
    let userId = '';
    let primary_id = '';
    let alternative_id = '';
    let primary_username = '';
    let alternative_username = '';
    let emergency_message = '';

    socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
    })

    socket.on('alert', function(body) {
        const confirmation = window.confirm("USER \"" + body.username + "\" has send you an EMERGENCY message: \n\"" + body.message + "\"\nClick \"OK\" will redirect you to Google Map of " + body.username + "'s location\nPlease allow redirect permission if nothing happen :)");        
        if (confirmation) {
            if (body.link === 'does not allow location sharing') {
                alert("\"" + body.username + "\" " + body.link);
            } else {
                window.open(body.link);
            }
        } else {
            console.log('User clicked Cancel');
        }
      });

    window.onload = async function() {
        userId = #{user_id}
        console.log("Current user id is: " + userId);
        const response = await fetch(`/emergencyContacts/${userId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(response => response.json()).then((data) => {
            primary_id = data.data[0][0].primary_contact_id
            alternative_id = data.data[0][0].alternative_contact_id
            emergency_message = data.data[0][0].emergency_message;
            console.log(data);
        })
        const primaryResponse = await fetch(`/users/${primary_id}`, {
            method: 'GET',
            headers: {
            'Content-Type': 'application/json',
        },
        }).then(response => response.json()).then((data) => {
            primary_username = data.data[0].username;
        })
        const alternativeResponse = await fetch(`/users/${alternative_id}`, {
            method: 'GET',
            headers: {
            'Content-Type': 'application/json',
        },
        }).then(response => response.json()).then((data) => {            
            alternative_username = data.data[0].username;
            renderEmergencyContact(primary_username, alternative_username, emergency_message);
        })
    }

    
    socket.on("testMode", () => {
        showOverlay();
    });

    socket.on("testFinish", () => {
        hideOverlay();
    });

    async function changePrimaryContact() {
        const userId = #{user_id};
        let primaryForm = document.getElementById('primary-contact-form');
        let new_primary_username = primaryForm.primary.value.trim();
        if (!new_primary_username) {
            alert("You cannot have empty input!");
            return; 
        }

        primaryForm.querySelector('[name="primary"]').value = ''; // Reset input value
        if (primary_username === new_primary_username) {
            alert(primary_username + " is already your primary contact!");
            return; 
        }

        const response = await fetch(`/users/username/${new_primary_username}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (response.ok) {
            const data = await response.json();
            if (data.data[0].length === 0) {
                alert("User does not exist!")
            } else if (userId === data.data[0][0].user_id) {
                alert("You cannot set yourself as contact!")
            } else if (data.data[0][0].user_id === alternative_id) {
                alert("You cannot set both contact to the same person")
            } else {
                primary_username = new_primary_username
                primary_id = data.data[0][0].user_id
                const requestBody = {
                    user_id: userId,
                    updateAt: "primary_contact_id",
                    updateValue: primary_username,
                    updateId: primary_id
                }

                const updatePrimary = await fetch(`/emergencyContacts/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody),
                    })

                renderEmergencyContact(primary_username, alternative_username, emergency_message);
            } 
        } else {
            console.error('Failed to fetch user data');
        }
    }

    async function changeAlternativeContact() {
        const userId = #{user_id};
        let alternativeForm = document.getElementById('alternative-contact-form');
        let new_alternative_username = alternativeForm.alternative.value.trim();
        if (!new_alternative_username) {
            alert("You cannot have empty input!")
            return; 
        }

        alternativeForm.querySelector('[name="alternative"]').value = ''; // Reset input value
        if (alternative_username === new_alternative_username) {
            alert(alternative_username + " is already your alternative contact!");
            return; 
        }

        const response = await fetch(`/users/username/${new_alternative_username}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (response.ok) {
            const data = await response.json();
            if (data.data[0].length === 0) {
                alert("User does not exist!")
            } else if (userId === data.data[0][0].user_id) {
                alert("You cannot set yourself as contact!")
            } else if (primary_id === data.data[0][0].user_id) {
                alert("You cannot set both contact to the same person")
            } else {
                alternative_username = new_alternative_username
                alternative_id = data.data[0][0].user_id
                const requestBody = {
                    user_id: userId,
                    updateAt: "alternative_contact_id",
                    updateValue: alternative_username,
                    updateId: alternative_id
                }

                const updateAlternative = await fetch(`/emergencyContacts/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestBody),
                    })

                renderEmergencyContact(primary_username, alternative_username, emergency_message);
            } 
        } else {
            console.error('Failed to fetch user data');
        }
    }

    async function changeEmergencyMessage() {
        const userId = #{user_id};
        let messageArea = document.getElementById("emergency-message");
        emergency_message = messageArea.value;
        if (!emergency_message) {
            alert("You cannot have empty input!")
            return; 
        } 
        messageArea.value = '';

        const requestBody = {
            user_id: userId,
            updateAt: "emergency_message",
            updateValue: emergency_message
        }

        const updateMessage = await fetch(`/emergencyContacts/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
            })

        renderEmergencyContact(primary_username, alternative_username, emergency_message);
    }

    async function changeLocationPermission() {
        const userId = #{user_id};
        const allowLocationInput = document.querySelector('input[name="location"]:checked');

        if (!allowLocationInput) {
            alert('Please select either YES or NO for location sharing.');
            return;
        }

        const allowLocation = allowLocationInput.value;

        const requestBody = {
            user_id: userId,
            updateAt: "location_allow",
            updateValue: allowLocation
        };

        const updatePermission = await fetch(`/emergencyContacts/${userId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
            })

        if (allowLocation === 'yes') {
            setTimeout(() => {
                updateLocationLink(latitude, longitude);
            }, 8000); 
        }

        if (updatePermission.ok) {
            alert('Location sharing preference saved successfully.');
        } else {
            alert('Failed to save location sharing preference.');
        }
        document.querySelector('input[name="location"]:checked').checked = false;
    }

    async function updateLocationLink() {
        const userId = #{user_id}; // Assuming user_id is obtained from somewhere
        const link = googleMapLink

        const requestBody = {
            user_id: userId,
            updateAt: "location_link",
            updateValue: link
        };

        try {
            const response = await fetch(`/emergencyContacts/${userId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestBody),
            });
        } catch (error) {
            console.error('Error updating location link:', error);
            alert('An error occurred while updating location link.');
        }
    }

    function routeToDirectory() {
        const user_id = #{user_id}
        window.location.href = `/directory/${user_id}`
    }
    
    function showOverlay() {
      document.getElementById('overlayForTest').style.display = 'flex';
    }

    function hideOverlay() {
      document.getElementById('overlayForTest').style.display = 'none';
    }
    
    async function logout(){
        const userId = #{user_id};
        const requestBody = {
          user_id: userId,
          updateAt: "online_status",
          updateValue: "offline",
        }
        await fetch(`/users/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'X-Performance-Test': 'true'
          },
          body: JSON.stringify(requestBody),
        }).then(response=> response.json()).then((data)=>{
          console.log(data.message)
        })

        window.location.href = `/`
    }

    socket.on("inactive", () => {
        alert("your account is changed to Inactive by a Adminitrator. You will be logged out.");
        logout();
    })


