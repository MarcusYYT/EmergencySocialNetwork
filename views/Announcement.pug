doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
  link(rel='stylesheet' type='text/css' href='/stylesheets/index.css')
  script(src='/javascripts/announcements.js')
  title Announcements
.links
  a.btn.btn-primary(onclick='routeToDirectory()') Back
#post-wrapper
  h2#message-header Announcements
  form.search-form.input-group.mb-3(onsubmit="submitSearch()" onchange="searchFinished()")
    input.search-input.form-control(type='text', name='search', placeholder='Search...')
  #announcement-board
  form#post-form(method='POST')
    textarea#message(placeholder='Type your message here...' required='')
    button#post-btn.btn.btn-primary(type='button' onclick='postAnnouncement()') Post
script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

  const socket = io();
  socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
  })
  let username = "";

  function routeToDirectory(){
    const user_id = #{user_id}
    window.location.href = `/directory/${user_id}`
  }


  async function postAnnouncement(){
    let textArea = document.getElementById("message")
    let textContent = textArea.value
    let path = window.location.pathname;
    textArea.value = "";
    // Get the user_id (assuming it's the last part of the URL)

    let userId = #{user_id}

    const announcementData = {
      username: username, 
      user_id: userId,
      dateTime: new Date().toLocaleString(),
      content: textContent
    };

      await fetch('/announcements', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(announcementData)})
            .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
  }

    function filterStopWords(userInput){
        const stopWords = [
          "a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be",
          "because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every",
          "for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in",
          "into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither",
          "no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she",
          "should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis",
          "to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why",
          "will","with","would","yet","you","your"
        ];

        let userInputWordArray = userInput.split(/\s+/);

        let filteredInput = userInput;

        for (word of userInputWordArray) {
          if (stopWords.includes(word)) {
              filteredInput = filteredInput.replace(word, "")
          } 
        }

        return filteredInput;
    }

  async function submitSearch() {
      event.preventDefault()

      let searchInput = document.getElementsByClassName('search-input')[0];
      let searchValue = searchInput.value;

      let filteredSearchValue = filterStopWords(searchValue)

      if(filteredSearchValue !== ""){
        await fetch(`/search?q=${filteredSearchValue}&domain=Announcements`, {
          method: 'GET',
          headers: {
              'Content-Type': 'application/json',
          }
        }).then(response => response.json()).then(async (data) => {
            console.log("Data in response::")
            console.log(data.data);
            renderSearchedAnnouncements(data.data)
        }).catch(error => {
            console.error(error);
        })
      }

      else{
        renderEmptyAnnouncement();
      }
  }

  async function searchFinished(){

        let searchInput = document.getElementsByClassName('search-input')[0];
        let searchValue = searchInput.value;

        if (searchValue === ""){
          await fetch('/announcements')
            .then(response => response.json())
            .then(data => {
                console.log(data);
                renderAnnouncements(data.data)
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
        }
      }

  window.onload = async function() {
    const userId = #{user_id}
    const response = await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })

    await fetch('/announcements')
         .then(response => response.json())
         .then(data => {
             console.log(data);
             renderAnnouncements(data.data)
         })
         .catch(error => {
             console.error('Error fetching data:', error);
         });
  }

  async function logout(){
    const userId = #{user_id};
    const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
    }

    await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
  }

  socket.on("announcementData", (announcementData) => {
    let announcementBoard = document.getElementById("announcement-board")
    let msgData = {
        sender: announcementData.username,
        message: announcementData.content,
        dateTime:  announcementData.dateTime
    }
    let announcementElement = constructAnnouncement(msgData);
    announcementBoard.appendChild(announcementElement);
    document.getElementById("announcement-board").scrollTop = announcementBoard.scrollHeight;
  });
  
  
