doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css')
    //- link(rel='stylesheet', type='text/css', href='/stylesheets/index.css')
    script(src='/javascripts/directory.js')
    script(src='/javascripts/threads.js')
    script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js")
    script(src='/javascripts/userSearch.js')
    title Directory 
  body.bg-light
    // Top Navigation Bar
    nav.navbar.navbar-expand-lg.navbar-light.bg-white.shadow-sm.mb-1
      .container
        button.btn.btn-link.text-dark.border-0(onclick='toggleHamburgerMenu()')
          i.fas.fa-bars.fa-lg
        h5.navbar-brand.mb-0.mx-auto Emergency Social
        button#logout.btn.btn-outline-primary(onclick='logout()')
          i.fas.fa-sign-out-alt.me-2
          | Log Out

    .container.py-3
      .row
        // Side Navigation Menu (Hidden by default)
        #hamburgerMenu.links.position-fixed.bg-white.shadow.p-3.rounded-3(style='display: none; z-index: 1050; left: 15px; top: 70px; width: 250px;')
          .d-flex.flex-column.gap-2
            a.navLinks.btn.btn-light.text-start(onclick='routeToAnnouncement()')
              i.fas.fa-bullhorn.me-2
              | Announcements
            a.navLinks.btn.btn-light.text-start(onclick='routeToMessageWall()')
              i.fas.fa-comments.me-2
              | Public Chat
            a.navLinks.btn.btn-light.text-start(onclick='routeToResource()')
              i.fas.fa-book.me-2
              | Resources
            a.navLinks.btn.btn-light.text-start(onclick='routeToThreadWall()')
              i.fas.fa-list-ul.me-2
              | Threads
            a.navLinks.btn.btn-light.text-start(onclick='routeToEmergencyContact()')
              i.fas.fa-phone-alt.me-2
              | Contacts
            a.navLinks.btn.btn-light.text-start(id='TestBtn', onclick='routeToTest()')
              i.fas.fa-tachometer-alt.me-2
              | Speed Test
            a.navLinks.btn.btn-light.text-start(onclick='routeToSetting()')
              i.fas.fa-bell.me-2
              | Notification
        
        // Main Content
        .col-lg-8.mx-auto
          // Search Component
          .card.shadow-sm.border-0.rounded-3.mb-4
            .card-body
              include components/UserSearch
          // User Profile Card
          .card.shadow-sm.border-0.rounded-3.mb-4
            .card-body
              #status-wrapper.d-flex.flex-column.align-items-center.text-center.mb-3
                // User status will be rendered here by JavaScript
                
                .dropdown.mt-3.w-100
                  button#status-list.btn.btn-primary.dropdown-toggle.w-100(type='button' data-bs-toggle='dropdown' aria-expanded='false')
                    i.fas.fa-user-circle.me-2
                    | Change Status
                  #dropdown-wrapper
                    ul.dropdown-menu.w-100#status-dropdown
                      li#ok-status.status-options
                        a.status-item.dropdown-item.d-flex.align-items-center
                          i.fas.fa-check-circle.text-success.me-2
                          | OK
                      li#help-status.status-options
                        a.status-item.dropdown-item.d-flex.align-items-center
                          i.fas.fa-exclamation-circle.text-warning.me-2
                          | Help
                      li#emergency-status.status-options
                        a.status-item.dropdown-item.d-flex.align-items-center
                          i.fas.fa-exclamation-triangle.text-danger.me-2
                          | Emergency
          

          
          // Directory Card
          .card.shadow-sm.border-0.rounded-3
            .card-header.bg-white.border-0.py-3
              h5#directory-header.mb-0.fw-bold.text-primary
                i.fas.fa-users.me-2
                | ESN Directory
            .card-body.p-0
              #directory.list-group.list-group-flush
                // Directory items will be rendered here by JavaScript
    
    // Testing Overlay
    #overlayForTest.position-fixed.top-0.start-0.w-100.h-100.bg-dark.d-none.justify-content-center.align-items-center.text-white(style='opacity: 0.9; z-index: 2000;')
      .text-center.p-4
        .spinner-border.text-light.mb-3(role='status')
        p.h5 Currently Speed Testing... 
        p Don't Close the Browser Tab...

    script.
      const socket = io();
      let username = '';
      let role = '';
      const userId = #{user_id};
      
      // Store userId in a hidden input for the search component
      document.addEventListener('DOMContentLoaded', function() {
        const userIdInput = document.createElement('input');
        userIdInput.type = 'hidden';
        userIdInput.id = 'user-id';
        userIdInput.value = userId;
        document.body.appendChild(userIdInput);
      });

      socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
      })
  
      window.onload = async function() {
        addEventListenerstoStatus();
        createEmergencyContact();
        const response = await fetch(`/users/${userId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }).then(response => response.json()).then((data) => {
          username = data.data[0].username;
          renderMyStatus(username, data.data[0].status)
          role = data.data[0].privilege;
          if (role !== 'Administrator') {
            document.getElementById('TestBtn').style.display = 'none';
          } else {
            document.getElementById('TestBtn').style.display = 'flex';
          }
          
          // Initialize the search component with context
          initializeSearch(userId, role);
        })
      }

      async function getUsers(){
        const response = await fetch('/users');
        const data = await response.json();
        if (role === 'Administrator') {
          return data;
        } else {
          data.data = data.data.filter(user => user.isActive);
          console.log(data)
          return data;
        }
      }

      function sortUsers(data){
        let online = []
        let offline = []

        for (let i = 0; i < data.length; i++) {
            if (data[i].online_status === "online") {
                online.push(data[i])
            }
            else {
                offline.push(data[i])
            }
        }

        online.sort(function (a, b) {
            return a.username.localeCompare(b.username)
        })

        offline.sort(function (a, b) {
            return a.username.localeCompare(b.username)
        })

        return online.concat(offline)
      }

      function renderESNList(list, unread, role) {
        const userId = #{user_id}
        let directory = document.getElementById("directory");
        while(directory.firstChild){
          directory.removeChild(directory.lastChild);
        }
        let userToUnreadCount = new Map();
        for(let i = 0; i < unread.length; i++){
          console.log(unread.unreadCount)
          userToUnreadCount.set(unread[i].sender.id, unread[i].unreadCount);
        }

        if(list.length == 0){
          let emptyMessage = document.createElement("div")
          emptyMessage.className = 'text-center p-4 text-muted'
          emptyMessage.innerHTML = '<i class="fas fa-search fa-3x mb-3"></i><p class="h5">No results found</p>'
          directory.appendChild(emptyMessage);
        }
      
        for (let i = 0; i < list.length; i++) {
          let userDiv = document.createElement("div");
          userDiv.setAttribute("class", "list-group-item list-group-item-action d-flex align-items-center p-3");
          
          // Online status indicator
          let onlineStatusField = document.createElement("div");
          onlineStatusField.setAttribute("class", "me-3");
          
          let onlineStatusIcon = document.createElement("i");
          if (list[i].online_status === "online") {
            onlineStatusIcon.setAttribute("class", "fas fa-circle text-success");
          } else {
            onlineStatusIcon.setAttribute("class", "fas fa-circle text-secondary");
          }
          onlineStatusField.appendChild(onlineStatusIcon);
          
          // Username
          let usernameField = document.createElement("div");
          usernameField.setAttribute("class", "flex-grow-1");
          usernameField.style.cursor = "pointer";
          let usernameText = document.createTextNode(list[i].username);
          usernameField.appendChild(usernameText);
          usernameField.addEventListener("click", () => {routeToPrivateChat(userId, list[i].user_id)});
          
          // Status indicator
          let statusField = document.createElement("div");
          statusField.setAttribute("class", "ms-auto me-2");
          
          let statusIcon = document.createElement("i");
          if(list[i].status == "OK"){
            statusIcon.setAttribute("class", "fas fa-check-circle text-success");
          } else if(list[i].status == "emergency"){
            statusIcon.setAttribute("class", "fas fa-exclamation-triangle text-danger");
          } else if(list[i].status == "help"){
            statusIcon.setAttribute("class", "fas fa-exclamation-circle text-warning");
          }
          statusField.appendChild(statusIcon);
          
          // Unread message badge
          if(userToUnreadCount.has(list[i].user_id)){
            let count = userToUnreadCount.get((list[i].user_id));
            let unReadBadge = document.createElement("span");
            unReadBadge.setAttribute("class", "badge bg-danger rounded-pill ms-2");
            unReadBadge.appendChild(document.createTextNode(count));
            statusField.appendChild(unReadBadge);
          }
          
          // Edit button for admins
          if(role === 'Administrator'){
            let editButton = document.createElement("button");
            editButton.setAttribute("class", "btn btn-sm btn-outline-secondary ms-2");
            editButton.innerHTML = '<i class="fas fa-pencil-alt"></i>';
            editButton.addEventListener("click", () => {
              renderEditUserOverlay(list[i])
            });
            userDiv.appendChild(editButton);
          }
          
          userDiv.appendChild(onlineStatusField);
          userDiv.appendChild(usernameField);
          userDiv.appendChild(statusField);
          
          directory.appendChild(userDiv);
        }
      }

      function createRadioButtonWrapper(selected){
        let dropdownWrapper = document.createElement("div");
        dropdownWrapper.setAttribute("class", "dropdownWrapper");

        let dropdownLabel = document.createElement("label");
        dropdownLabel.setAttribute("class", "dropdownLabel");
        dropdownLabel.setAttribute("for", "statusSelect");  // Ensure the label corresponds to the select element
        dropdownLabel = addTextToElement(dropdownLabel, "Account Status:");

        let dropdownSelect = document.createElement("select");
        dropdownSelect.setAttribute("class", "form-select-sm dropdownSelect");
        dropdownSelect.setAttribute("id", "statusSelect");  // Set unique ID here

        let activeOption = createOption("Active", selected);
        let inactiveOption = createOption("Inactive", selected);

        dropdownSelect.appendChild(activeOption);
        dropdownSelect.appendChild(inactiveOption);

        dropdownWrapper.appendChild(dropdownLabel);
        dropdownWrapper.appendChild(dropdownSelect);

        return dropdownWrapper;
      }

      function createInput(selectedName, label, id){
        let inputWrapper = document.createElement("div")
        inputWrapper.setAttribute("class", "inputWrapper")
        let inputNameLabel = document.createElement("label")
        inputNameLabel.setAttribute("class", "inputNameLabel")
        inputNameLabel = addTextToElement(inputNameLabel, label)
        let inputNameInput = document.createElement("input")
        inputNameInput.setAttribute("class", "form-control inputNameInput")
        inputNameInput.setAttribute("id", id)
        inputNameInput.setAttribute("type", "text")
        if(selectedName != undefined){
          inputNameInput.value = selectedName
        }
        inputWrapper.appendChild(inputNameLabel)
        inputWrapper.appendChild(inputNameInput)
        return inputWrapper
      }

      function createDropdown(selected){
        let dropdownWrapper = document.createElement("div");
        dropdownWrapper.setAttribute("class", "dropdownWrapper");

        let dropdownLabel = document.createElement("label");
        dropdownLabel.setAttribute("class", "dropdownLabel");
        dropdownLabel.setAttribute("for", "privilegeSelect");  // Ensure the label corresponds to the select element
        dropdownLabel = addTextToElement(dropdownLabel, "Privilege Level:");

        let dropdownSelect = document.createElement("select");
        dropdownSelect.setAttribute("class", "form-select-sm dropdownSelect");
        dropdownSelect.setAttribute("id", "privilegeSelect");  // Set unique ID here

        let coordinatorOption = createOption("Coordinator", selected);
        let adminOption = createOption("Administrator", selected);
        let citizenOption = createOption("Citizen", selected);

        dropdownSelect.appendChild(coordinatorOption);
        dropdownSelect.appendChild(adminOption);
        dropdownSelect.appendChild(citizenOption);

        dropdownWrapper.appendChild(dropdownLabel);
        dropdownWrapper.appendChild(dropdownSelect);

        return dropdownWrapper;
      }

      // See userController for needing a new service method
      function renderEditUserOverlay(userData){
        let editOverlay = document.createElement("div")
        editOverlay.setAttribute("id", "overlay")
        let body = document.getElementsByTagName("body")[0]
        let directoryWrapper = document.getElementById("directory-wrapper")
        let editModal = document.createElement("div")
        editModal.setAttribute("id", "editModal")
        let cancelButton = document.createElement("i")
        cancelButton.setAttribute("class", "bi bi-x")
        cancelButton.addEventListener("click", () => {removeEditOverlay()})
        let editHeader = document.createElement("h2")
        editHeader.setAttribute("id", "editHeader")
        editHeader.appendChild(document.createTextNode("Edit User"))

        let isActive = '';
        if(userData.isActive){
          isActive = 'Active'
        } else {
          isActive = 'Inactive'
        }
        let statusWrapper = createRadioButtonWrapper(isActive);
        let privilegeWrapper = createDropdown(userData.privilege);
        let usernameWrapper = createInput(userData.username, "Username: ", "usernameWrapper");
        let passwordWrapper = createInput("", "Password: ", "passwordWrapper");

        let saveButton = document.createElement("button")
        saveButton.className = "btn btn-primary validate"
        saveButton = addTextToElement(saveButton, "Save Changes")
        //validate changes for that specific username typed in
        saveButton.addEventListener("click", async () => {
          let privilegeValue = document.getElementById("privilegeSelect").value;
          let statusValue = document.getElementById("statusSelect").value;
          validateChanges(document.getElementById("usernameWrapper").value, 
                                                                          userData.username, 
                                                                          document.getElementById("passwordWrapper").value,
                                                                          privilegeValue,
                                                                          statusValue,
                                                                          userData.user_id)})

        editModal.appendChild(cancelButton)
        editModal.appendChild(editHeader)
        editModal.appendChild(statusWrapper)
        editModal.appendChild(privilegeWrapper)
        editModal.appendChild(usernameWrapper)
        editModal.appendChild(passwordWrapper)
        editModal.appendChild(saveButton)
        body.insertBefore(editOverlay, directoryWrapper)
        body.insertBefore(editModal, directoryWrapper)
      }

      async function validateChanges(username, prev_username, password, privilegeValue, statusValue, userId){
        await fetch('/auth/validate', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username: username, prev_username: prev_username })
          }).then(response => response.json()).then((data) => {  
            let formData = {
              user_id: userId,
              username: username, 
              password: password,
              privilege: privilegeValue,
              isActive: statusValue
            }
            if(username === prev_username){
              formData.username = -1;
            }
            validationResult(data.success, data.message, validatePassword(password), formData)
        })
      }

      function validatePassword(password) {     
        if (password.length < 4 && password.length > 0) {  
          return false;
        }
        return true;
      }

      async function validationResult(usernameValidation, message, passwordValidation, formData) {
        if (usernameValidation && passwordValidation) {
            const confirmation = window.confirm("Username and Password Validation Success! Do you want to save the changes?");  
            if (confirmation) {
              await fetch(`/users/${formData.user_id}`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({userid: formData.user_id, updateAt: 'admin', updateValue: formData}),
                }).then(response => response.json())
                  .then(data => {
                      console.log(data);
                      if(!data.success){
                        alert(data.messages)
                      }
                      console.log("Data saved");
                      
                  })
                  .catch(error => {
                      console.error('Error push status history', error);
                  });
              removeEditOverlay();
            }  
        }     
        else if (!passwordValidation){
          alert("The password has to be at least 4 characters long");
        }
        else{
          alert(message);
        }
      }

      function addEventListenerstoStatus(){
        let okStatus = document.getElementById("ok-status");
        let helpStatus = document.getElementById("help-status");
        let emergencyStatus = document.getElementById("emergency-status");

        okStatus.addEventListener("click", () => {changeMyStatus("OK")})
        helpStatus.addEventListener("click", () => {changeMyStatus("help")})
        emergencyStatus.addEventListener("click", () => {changeMyStatus("emergency")})
      }

      async function changeMyStatus(selectedValue) {
        const userId = #{user_id};
        const requestBody = {
          user_id: userId,
          updateAt: "status",
          updateValue: selectedValue, 
          username: username
        }
        await fetch('/status', {
          method: 'POST', 
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({user_id: userId, status: selectedValue}),
        }) .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error push status history', error);
            });

        const updateStatus = await fetch(`/users/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
          })
          
          if(updateStatus.ok){
              const fetchUser = await getUsers()
              if(fetchUser.ok){
                const data = fetchUser
                console.log(data)

                await fetch(`/privatePosts/unread/${userId}`, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  }).then(response => response.json()).then((unRead) => {
                    // implement to display the notification
                    renderESNList(sortUsers(data.data),unRead.data, role)
                })
              
              }
          }
         
        renderMyStatus(username, selectedValue);  

        if (selectedValue === 'emergency') {
          let primary_id = '';
          let alternative_id = '';
          let emergency_message = '';
          let location_allow = '';
          let location_link = '';

          await fetch(`/emergencyContacts/${userId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
          }).then(response => response.json()).then((data) => {
              primary_id = data.data[0][0].primary_contact_id;
              alternative_id = data.data[0][0].alternative_contact_id;
              emergency_message = data.data[0][0].emergency_message;
              location_allow = data.data[0][0].location_allow;
              location_link = data.data[0][0].location_link;
          })
          await fetch(`/emergencyContacts/${primary_id}/${alternative_id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        }).then(response => response.json()).then((data) => {
            primary_socketId = data.data.primarySocketId
            alternative_socketId = data.data.alternativeSocketId

        })

        let link = ''
        if (location_allow === 'no') {
            link = 'does not allow location sharing'
        } else {
            link = location_link;
        }
                    
          const postData = {
              username: username,
              message: emergency_message,
              link: link,
              primary: primary_socketId,
              alternative: alternative_socketId
          };

          await fetch('/emergencyContacts/emergency_alert', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify(postData)})
              .then(response => response.json())
              .then(data => {
                  console.log(data);
                  alert("Emergency message is sent to your emergency contacts!")
              })
              .catch(error => {
                  console.error('Error fetching data:', error);
              });
        }   
      }

      socket.on("status_update", async ()=> { 
        const userId = #{user_id}
        await getUsers().then(async (data)=>{
          await fetch(`/privatePosts/unread/${userId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          }).then(response => response.json()).then((unRead) => {
            console.log('unread message status: ')
            console.log(unRead)
            // implement to display the notification
            renderESNList(sortUsers(data.data),unRead.data, role)
          })

        });
      });

      socket.on('alert', function(body) {
        const confirmation = window.confirm("USER \"" + body.username + "\" has send you an EMERGENCY message: \n\"" + body.message + "\"\nClick \"OK\" will redirect you to Google Map of " + body.username + "'s location\nPlease allow redirect permission if nothing happen :)");        
        if (confirmation) {
            if (body.link === 'does not allow location sharing') {
                alert("\"" + body.username + "\" " + body.link);
            } else {
                window.open(body.link);
            }
        } else {
            console.log('User clicked Cancel');
        }
      });

      function routeToAnnouncement() {
        const user_id = #{user_id};
        window.location.href = `/announcements/${user_id}`;
      }

      function routeToThreadWall() {
        const user_id = #{user_id};
        window.location.href = `/threadWall/${user_id}`;
      }

      function routeToMessageWall() {
        const user_id = #{user_id};
        window.location.href = `/messageWall/${user_id}`;
      }

      function routeToEmergencyContact() {
        const user_id = #{user_id};
        window.location.href = `/emergencyContact/${user_id}`;
      }

      function routeToTest() {
        const user_id = #{user_id};
        const confirmation = window.confirm("You have elected to do a speed test. Doing so will log you out. Do you want to proceed?");  
        if (confirmation) {        
          window.location.href = `/test/${user_id}`;
        }      
      }
      
      function routeToSetting() {
        const user_id = #{user_id};
        window.location.href = `/setting/${user_id}`;
      }

      function routeToResource() {
        const user_id = #{user_id};
        window.location.href = `/resources/${user_id}`;
      }

      function routeToAdministrate() {
        const user_id = #{user_id};
        window.location.href = `/administration/${user_id}`;
      }
      
      async function logout(){
        const userId = #{user_id};
        const requestBody = {
          user_id: userId,
          updateAt: "online_status",
          updateValue: "offline",
        }
        await fetch(`/users/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'X-Performance-Test': 'true'
          },
          body: JSON.stringify(requestBody),
        }).then(response=> response.json()).then((data)=>{
          console.log(data.message)
        })

        window.location.href = `/`
      }

      socket.on("inactive", () => {
        alert("your account is changed to Inactive by a Adminitrator. You will be logged out.");
        logout();
      })

      function showOverlay() {
        document.getElementById('overlayForTest').style.display = 'flex';
      }

      function hideOverlay() {
        document.getElementById('overlayForTest').style.display = 'none';
      }

      socket.on("testMode", () => {
            showOverlay();
      });

      socket.on("testFinish", () => {
            hideOverlay();
      });

      async function createEmergencyContact() {
        const userId = #{user_id};
        console.log(userId);

        try {
          const response = await fetch(`/emergencyContacts/${userId}`, {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (response.status === 200) {
            const responseData = await response.json();
            if (responseData.data[0].length !== 0) {
              console.log('Emergency contact data already exists.');
              return; // Exit the function if the GET request is successful and the user ID exists
            } else {
              const postData = {
                user_id: userId,
                primary_id: 10,
                alternative_id: 11,
                emergency_message: 'I need HELP!!!',
              };

              await fetch('/emergencyContacts', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(postData),
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log("emergency contact creation")
                  console.log(data);
                })
                .catch((error) => {
                  console.error('Error fetching data:', error);
                });
                }
              }
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      }
    
