doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', type='text/css', href='/stylesheets/index.css')
    script(src='/javascripts/directory.js')
    script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
    title Directory 
  body
    .links
      a.btn.btn-primary(onclick='newPost()') New Post
      a.btn.btn-primary(onclick='logout()') Log Out
    #directory-wrapper
      h1#directory-header ESN Directory
      #directory
    script.
      const socket = io();
      socket.emit('registered', #{user_id});
      socket.on("status_update",async ()=> {
        await fetch('/users')
        .then(response => response.json())
        .then(data => {
            console.log(data);

            let online = []
            let offline = []

            for (let i = 0; i < data.data.length; i++) {
                if (data.data[i].online_status === "online") {
                    online.push(data.data[i])
                }
                else {
                    offline.push(data.data[i])
                }
            }

            online.sort(function (a, b) {
                return a.username.localeCompare(b.username)
            })

            offline.sort(function (a, b) {
                return a.username.localeCompare(b.username)
            })
            let directory = document.getElementById("directory");
            while(directory.firstChild){
              directory.removeChild(directory.lastChild);
            }
            renderESNList(online)
            renderESNList(offline)
            })
            })
      function newPost() {
      const user_id = #{user_id};
      window.location.href = `/messageWall/${user_id}`;
      }
      async function logout(){
      const userId = #{user_id};
      const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
      }
      await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
      'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
      }
      //- window.addEventListener('beforeunload', async function(event) {
      //- console.log('Browser is closing');
      //- await logout()
      //- });
        


    
