doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/index.css')
    script(src='/javascripts/directory.js')
    script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
    title Directory 
  body
    .links
      a.btn.btn-primary(onclick='newPost()') New Post
      a.btn.btn-primary(onclick='logout()') Log Out
    #status-wrapper 
      form#status-form(action="") 
        #status-options
          label(for='status') Change my status:
          select#status(name='status').form-select.form-select-sm
            option(value='OK') OK 
            option(value='help') Help
            option(value='emergency') Emergency
        button#change-status-btn.btn.btn-primary(type='button' onclick='changeMyStatus()') Submit
    #directory-wrapper
      h1#directory-header ESN Directory
      #directory.container.text-left
    script.
      const socket = io();
      let username = '';
      socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
      })
      

      window.onload = async function() {
        const userId = #{user_id}
        const response = await fetch(`/users/${userId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        }).then(response => response.json()).then((data) => {
          username = data.data[0].username;
          renderMyStatus(username, data.data[0].status)
        })
      }

      async function getUsers(){
        return await fetch('/users')
      }

      function sortUsers(data){
        let online = []
        let offline = []

        for (let i = 0; i < data.length; i++) {
            if (data[i].online_status === "online") {
                online.push(data[i])
            }
            else {
                offline.push(data[i])
            }
        }

        online.sort(function (a, b) {
            return a.username.localeCompare(b.username)
        })

        offline.sort(function (a, b) {
            return a.username.localeCompare(b.username)
        })

        return online.concat(offline)
      }

      function renderESNList(list, unread) {
        const userId = #{user_id}
        let directory = document.getElementById("directory");
        while(directory.firstChild){
          directory.removeChild(directory.lastChild);
        }
        let userToUnreadCount = new Map();
        for(let i = 0; i < unread.length; i++){
          console.log(unread.unreadCount)
          userToUnreadCount.set(unread[i].sender.id, unread[i].unreadCount);
        }
      
        for (let i = 0; i < list.length; i++) {

          let directory = document.getElementById("directory");
          let userDiv = document.createElement("div");
          userDiv.setAttribute("class", "directory-user row gx-1 justify-content-between");
          userDiv.addEventListener("click", () => {routeToPrivateChat(userId, list[i].user_id)})

          

          let usernameField = document.createElement("p");
          usernameField.setAttribute("class", "usernameField col-10");
          let usernameFieldText = document.createTextNode(list[i].username);
          usernameField.appendChild(usernameFieldText);

          let onlineStatusField = document.createElement("div");
          onlineStatusField.setAttribute("class", "onlineStatusField col-1");

          let onlineStatusFieldImage = document.createElement("i");
          onlineStatusFieldImage.setAttribute("class", "bi bi-record-fill");

          if (list[i].online_status === "online") {
            onlineStatusField.classList.add("online");
          }
          else {
            onlineStatusField.classList.add("offline");
          }

          onlineStatusField.appendChild(onlineStatusFieldImage);

          let statusField = document.createElement("div");
          statusField.setAttribute("class", "statusField col-1");

          let statusFieldImage = document.createElement("i");

          if(list[i].status == "OK"){
            statusFieldImage.setAttribute("class", "bi bi-check-circle-fill");
          }
          else if(list[i].status == "emergency"){
            statusFieldImage.setAttribute("class", "bi bi-bandaid-fill");  
          }
          else if(list[i].status == "help"){
            statusFieldImage.setAttribute("class", "bi bi-exclamation-circle-fill");
          }


          statusField.appendChild(statusFieldImage);
          userDiv.appendChild(onlineStatusField);
          userDiv.appendChild(usernameField);
          

          if(userToUnreadCount.has(list[i].user_id)){
            console.log(userToUnreadCount)
            let count = userToUnreadCount.get((list[i].user_id))
            let countDisplayValue = count;
            let unReadField = document.createElement("div");
            unReadField.setAttribute("class", "unReadField position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger");

            let unReadCount = document.createTextNode(countDisplayValue)
            unReadField.appendChild(unReadCount)
            userDiv.appendChild(unReadField);
          }

          userDiv.appendChild(statusField);

          directory.appendChild(userDiv);
        }

      }


      async function changeMyStatus() {
        let selectElement = document.getElementById('status');
        let selectedValue = selectElement.value;
        const userId = #{user_id};
        const requestBody = {
          user_id: userId,
          updateAt: "status",
          updateValue: selectedValue
        }
        await fetch('/status', {
          method: 'POST', 
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({user_id: userId, status: selectedValue}),
        }) .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error push status history', error);
            });
        const updateStatus = await fetch(`/users/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
          })
          
          if(updateStatus.ok){
              const fetchUser = await getUsers()
              if(fetchUser.ok){
                const data = await fetchUser.json();
                console.log(data)

                await fetch(`/privatePosts/unread/${userId}`, {
                  method: 'GET',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  }).then(response => response.json()).then((unRead) => {
                    console.log('unread message status: ')
                    console.log(unRead)
                    // implement to display the notification
                    renderESNList(sortUsers(data.data),unRead.data)
                })
              
              }
          }
         
        renderMyStatus(username, selectedValue);       
      }

      socket.on("status_update", async ()=> { 
        const userId = #{user_id}
        await getUsers().then(response => response.json()).then(async (data)=>{
          await fetch(`/privatePosts/unread/${userId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          }).then(response => response.json()).then((unRead) => {
            console.log('unread message status: ')
            console.log(unRead)
            // implement to display the notification
            renderESNList(sortUsers(data.data),unRead.data)
          })

        });
      })

      socket.on("newMessage", async (res) => {
        alert(`${res.senderName} sent you a new message`)
      })

      function newPost() {
        const user_id = #{user_id};
        window.location.href = `/messageWall/${user_id}`;
      }
      
      async function logout(){
        const userId = #{user_id};
        const requestBody = {
          user_id: userId,
          updateAt: "online_status",
          updateValue: "offline"
        }


        await fetch(`/users/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody),
        }).then(response=> response.json()).then((data)=>{
          console.log(data.message)
        })

        window.location.href = `/`;
      }


    
