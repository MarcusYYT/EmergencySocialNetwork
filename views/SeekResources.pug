doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
  link(rel='stylesheet' type='text/css' href='/stylesheets/index.css')
  script(src='/javascripts/announcements.js')
  title Shared Resources
.links
  a.btn.btn-primary(onclick='routeToResources()') Back
#post-wrapper
    h2#message-header Resources Shared by Others
    #announcement-board
        #resourceList.resource-list
script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

  const socket = io();
  socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
  })
  let username = "";

  function routeToResources(){
    const user_id = #{user_id}
    window.location.href = `/resources/${user_id}`
  }




  window.onload = async function() {
    const userId = #{user_id}
    const response = await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })

    await fetch(`/resources/grouped`)
         .then(response => response.json())
         .then(data => {
             console.log(data);
             // renderAnnouncements(data.data)
             displayResources(data.data)
         })
         .catch(error => {
             console.error('Error fetching data:', error);
         });
  }

  async function logout(){
    const userId = #{user_id};
    const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
    }

    await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
  }


  // function displayResources(resources) {
  //     const listElement = document.getElementById('resourceList'); // This should be the id of your container element
  //
  //     // Clear any existing content
  //     listElement.innerHTML = '';
  //
  //     resources.forEach(resource => {
  //         const resourceElement = document.createElement('div');
  //         resourceElement.className = 'resource-item';
  //
  //         const nameLink = document.createElement('a');
  //         nameLink.href = `/resources/shared/edit/${resource.resource_id}`;
  //         nameLink.className = 'resource-link';
  //
  //         const nameElement = document.createElement('h3');
  //         nameElement.textContent = `${resource.resource_name} (${resource.resource_amount})`;
  //         resourceElement.appendChild(nameElement);
  //         nameLink.appendChild(nameElement);
  //         resourceElement.appendChild(nameLink);
  //
  //         const typeElement = document.createElement('p');
  //         typeElement.textContent = resource.resource_type.name;
  //         resourceElement.appendChild(typeElement);
  //
  //         // If you want to add more details like notes or the user who shared the resource, continue appending elements here.
  //
  //         listElement.appendChild(resourceElement);
  //     });
  // }

  function displayResources(groups) {
      const listElement = document.getElementById('resourceList');
      listElement.innerHTML = '';

      const table = document.createElement('table');
      table.className = 'table table-hover';

      const thead = document.createElement('thead');
      const headers = ['Resource Type', 'Total Amount', 'Users Involved'];
      const headerRow = document.createElement('tr');
      headers.forEach(headerText => {
          const header = document.createElement('th');
          header.textContent = headerText;
          headerRow.appendChild(header);
      });
      thead.appendChild(headerRow);
      table.appendChild(thead);


      const tbody = document.createElement('tbody');
      groups.forEach(group => {
          console.log("group")
          console.log(group);
          const row = document.createElement('tr');
          row.addEventListener('click', () => loadTypeDetails(group.resource_type_id, group['resource_type.name'])); // 点击时加载该类型的详细列表

          const typeCell = document.createElement('td');
          typeCell.textContent = group['resource_type.name'];
          row.appendChild(typeCell);

          const amountCell = document.createElement('td');
          amountCell.textContent = group.amount_sum;
          row.appendChild(amountCell);

          const userCell = document.createElement('td');
          userCell.textContent = group.user_count;
          row.appendChild(userCell);

          tbody.appendChild(row);
      });

      table.appendChild(tbody);
      listElement.appendChild(table);
  }

  function loadTypeDetails(typeId, typeName) {
      window.location.href = `/resources/typeview/${typeId}/${typeName}`;
  }
