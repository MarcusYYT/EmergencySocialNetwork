doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
  link(rel='stylesheet' type='text/css' href='/stylesheets/index.css')
  script(src='/javascripts/resources.js')
  title Type of Resources
.links
  a.btn.btn-primary(onclick='routeToResources()') Back
#post-wrapper
    h2#message-header Shared Resources
    #announcement-board
        #resourceList.resource-list
script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

  const socket = io();
  socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
  })
  let username = "";

  function routeToResources(){
    const user_id = #{user_id}
    window.location.href = `/resources/seek/${user_id}`
  }

  let userId = ""
  let typeId = ""
  let typeName = ""
  let latitude = 0
  let longitude = 0
  let openedResource = null

  window.onload = async function() {
    userId = #{user_id}
    typeId = #{type_id}
    typeName = `#{type_name}`
    await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
          'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })
    document.getElementById('message-header').textContent = `${typeName} Resources`;
    const response = await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })


    await fetch(`/resource/type/${typeId}`)
         .then(response => response.json())
         .then(data => {
             console.log(data);
             // renderAnnouncements(data.data)
             // displayResources(data.data)
                displayResources(data.data)
         })
         .catch(error => {
             console.error('Error fetching data:', error);
         });
  }

  async function logout(){
    const userId = #{user_id};
    const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
    }

    await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
  }

  async function displayResources(resources) {
      const listElement = document.getElementById('resourceList');
      listElement.innerHTML = '';

      resources.forEach(resource => {
          const resourceElement = document.createElement('div');
          resourceElement.className = 'resource-item';

          const cardBody = document.createElement('div');
          cardBody.style.display = 'flex';
          cardBody.style.justifyContent = 'space-between';

          const nameElement = document.createElement('h4');
          nameElement.textContent = `${resource.resource_name} (${resource.resource_amount} ${resource.resource_unit.name})`;
          cardBody.appendChild(nameElement);
          const distanceText = document.createElement('p');
          distanceText.className = 'card-text';
          distanceText.textContent = 'locating...'; // placeholder
          cardBody.appendChild(distanceText);
          resourceElement.appendChild(cardBody);
          const userElement = document.createElement('p');
          userElement.style.display = 'flex';
          userElement.style.marginBottom = '0';
          let onlineStatusField = document.createElement("div");
          onlineStatusField.setAttribute("class", "onlineStatusField col-1");

          let onlineStatusFieldImage = document.createElement("i");
          onlineStatusFieldImage.setAttribute("class", "bi bi-record-fill");
          if (resource.user.online_status === "online") {
              onlineStatusField.classList.add("online");
          } else {
              onlineStatusField.classList.add("offline");
          }
          onlineStatusField.appendChild(onlineStatusFieldImage);
            userElement.appendChild(onlineStatusField);
          const usernameElement = document.createElement('p');
          usernameElement.textContent = resource.user.username;
          usernameElement.style.marginBottom = '0';
          userElement.appendChild(usernameElement);
          resourceElement.appendChild(userElement);
          const moreElement = document.createElement('div');
          moreElement.style.display = 'none';
          const noteElement = document.createElement('p');
          noteElement.textContent = resource.resource_note;
          noteElement.style.marginBottom = '0';
          moreElement.appendChild(noteElement);
          const contactBtnGroup = document.createElement('div');
          contactBtnGroup.style.display = 'flex';
          contactBtnGroup.style.gap = '10px';
            contactBtnGroup.style.justifyContent = 'space-between';
          const callButton = document.createElement('a');
            callButton.className = 'btn btn-success';
            callButton.style.flex = '1';
          callButton.href = `tel:`+ resource.tel.replace(/[^0-9]+/g, '');
          callButton.insertAdjacentHTML('afterbegin', `<i class="bi bi-telephone-fill"></i> Call ${resource.user.username}`);
          contactBtnGroup.appendChild(callButton);
          const chatButton = document.createElement('a');
            chatButton.className = 'btn btn-info';
            chatButton.style.flex = '1';
            chatButton.onclick = () => routeToPrivateChat(userId, resource.user_id);
            chatButton.insertAdjacentHTML('afterbegin', `<i class="bi bi-chat-left-text-fill"></i> Chat ${resource.user.username}`);
            contactBtnGroup.appendChild(chatButton);
          moreElement.appendChild(contactBtnGroup);
          const navBtnGroup = document.createElement('div');
          navBtnGroup.style.display = 'flex';
          const navigateButton = document.createElement('a');
            navigateButton.className = 'btn btn-primary';
            navigateButton.style.margin = '10px 0 0 0';
            navigateButton.style.flex = '1';
            navigateButton.onclick = () => {
                window.open(`https://www.google.com/maps/dir/?api=1&destination=${resource.resource_latitude},${resource.resource_longitude}`);
            }
            navigateButton.insertAdjacentHTML('afterbegin', `<i class="bi bi-geo-alt-fill"></i> Navigate`);
            navBtnGroup.appendChild(navigateButton);
            moreElement.appendChild(navBtnGroup);
          resourceElement.appendChild(moreElement);
          listElement.appendChild(resourceElement);
          resource.distanceElement = distanceText;
          resourceElement.onclick = (event) => {
                if (openedResource && openedResource !== moreElement) {
                    openedResource.style.display = 'none';
                }
              moreElement.style.display = moreElement.style.display === 'none' ? 'block' : 'none';
                openedResource = moreElement;
          }
      });

      try {
          const position = await getLocation();
          const userLatitude = position.coords.latitude;
          const userLongitude = position.coords.longitude;

          resources.forEach(resource => {
              if (userLatitude !== 0 && userLongitude !== 0 &&
                  resource.resource_latitude !== 0 && resource.resource_longitude !== 0) {
                  const distance = calculateDistance(userLatitude, userLongitude, resource.resource_latitude, resource.resource_longitude);
                  resource.distanceElement.textContent = `${distance} mi`;
              } else {
                  resource.distanceElement.textContent = '';
              }
          });
      } catch (error) {
          resources.forEach(resource => {
              resource.distanceElement.textContent = ' ';
          });
          console.error('Error getting location: ', error);
      }
  }

  function routeToPrivateChat(sender, receiver) {
      //await changeReadStatus(sender, receiver)
      window.location.href = `/privatePostsWall/${sender}/${receiver}`;
  }

  function loadTypeDetails(typeId) {
      fetch(`/resource/details?typeId=${typeId}`)
          .then(response => response.json())
          .then(data => {
              console.log(data);
              displayResources(data.data);
          })
          .catch(error => console.error('Error loading resource details:', error));
  }
  socket.on("inactive", () => {
    alert("your account is changed to Inactive by a Adminitrator. You will be logged out.");
    logout();
  })
