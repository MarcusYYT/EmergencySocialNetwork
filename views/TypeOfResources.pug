doctype html
html(lang='en')
  head
    meta(charset='UTF-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css')
    link(rel='stylesheet', type='text/css', href='/stylesheets/index.css')
    script(src='/javascripts/resources.js')
    title Type of Resources
  body.bg-light
    // Navigation Bar
    nav.navbar.navbar-expand-lg.navbar-light.bg-white.shadow-sm.mb-4
      .container
        a.btn.btn-outline-primary(onclick='routeToResources()')
          i.fas.fa-arrow-left.me-2
          | Back

    .container.py-3
      .row.justify-content-center
        .col-lg-8.mx-auto
          // Resources Card
          .card.shadow-sm.border-0.rounded-3.mb-4
            .card-header.bg-white.border-0.py-3
              h5#message-header.mb-0.fw-bold.text-primary
                i.fas.fa-box.me-2
                | Shared Resources
            
            .card-body
              #announcement-board
                #resourceList.resource-list
                  // Resources will be rendered here

    // Testing Overlay
    #overlayForTest.position-fixed.top-0.start-0.w-100.h-100.bg-dark.d-none.justify-content-center.align-items-center.text-white(style='opacity: 0.9; z-index: 2000;')
      .text-center.p-4
        .spinner-border.text-light.mb-3(role='status')
        p.h5 Currently Speed Testing... 
        p Don't Close the Browser Tab...

script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.
  const socket = io();
  socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
  })
  let username = "";

  function routeToResources(){
    const user_id = #{user_id}
    window.location.href = `/resources/seek/${user_id}`
  }

  let userId = ""
  let typeId = ""
  let typeName = ""
  let latitude = 0
  let longitude = 0
  let openedResource = null

  window.onload = async function() {
    userId = #{user_id}
    typeId = #{type_id}
    typeName = `#{type_name}`
    await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
          'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })
    document.getElementById('message-header').textContent = `${typeName} Resources`;
    const response = await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })


    await fetch(`/resource/type/${typeId}`)
         .then(response => response.json())
         .then(data => {
             console.log(data);
             displayResources(data.data)
         })
         .catch(error => {
             console.error('Error fetching data:', error);
         });
  }

  async function logout(){
    const userId = #{user_id};
    const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
    }

    await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
  }

  function getLocation() {
      return new Promise((resolve, reject) => {
          if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(resolve, reject);
          } else {
              reject(new Error("Geolocation is not supported by this browser."));
          }
      });
  }

  function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 3958.8; // Radius of the Earth in miles
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a = 
          Math.sin(dLat/2) * Math.sin(dLat/2) +
          Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
          Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = R * c;
      return distance.toFixed(1); // Return distance with 1 decimal place
  }

  function routeToPrivateChat(sender, receiver) {
      window.location.href = `/privatePostsWall/${sender}/${receiver}`;
  }

  async function displayResources(resources) {
      const listElement = document.getElementById('resourceList');
      listElement.innerHTML = '';

      resources.forEach(resource => {
          const resourceElement = document.createElement('div');
          resourceElement.className = 'card shadow-sm mb-3 p-3 border-1';
          
          const resourceHeader = document.createElement('div');
          resourceHeader.className = 'd-flex justify-content-between align-items-center p-0 bg-white';
          
          const resourceInfo = document.createElement('div');
          resourceInfo.className = 'd-flex align-items-center';
          
          const resourceName = document.createElement('h5');
          resourceName.className = 'mb-0 me-2';
          resourceName.textContent = resource.resource_name;
          resourceInfo.appendChild(resourceName);
          
          const resourceAmount = document.createElement('span');
          resourceAmount.className = 'badge bg-primary rounded-pill';
          resourceAmount.textContent = `${resource.resource_amount} ${resource.resource_unit.name}`;
          resourceInfo.appendChild(resourceAmount);
          
          resourceHeader.appendChild(resourceInfo);
          
          const distanceText = document.createElement('span');
          distanceText.className = 'text-muted small';
          distanceText.textContent = 'locating...';
          resourceHeader.appendChild(distanceText);
          
          resourceElement.appendChild(resourceHeader);
          
          const userElement = document.createElement('div');
          userElement.className = 'd-flex align-items-center';
          
          const onlineStatusField = document.createElement('div');
          onlineStatusField.className = 'me-2';
          
          const onlineStatusFieldImage = document.createElement('i');
          if (resource.user.online_status === "online") {
              onlineStatusFieldImage.className = 'bi bi-circle-fill text-success';
          } else {
              onlineStatusFieldImage.className = 'bi bi-circle-fill text-danger';
          }
          onlineStatusField.appendChild(onlineStatusFieldImage);
          userElement.appendChild(onlineStatusField);
          
          const usernameElement = document.createElement('p');
          usernameElement.textContent = resource.user.username;
          usernameElement.className = 'mb-0';
          userElement.appendChild(usernameElement);
          
          resourceElement.appendChild(userElement);
          
          const moreElement = document.createElement('div');
          moreElement.style.display = 'none';
          moreElement.className = 'p-0';
          
          const noteElement = document.createElement('p');
          noteElement.textContent = resource.resource_note;
          noteElement.className = 'mb-0';
          moreElement.appendChild(noteElement);
          
          const contactBtnGroup = document.createElement('div');
          contactBtnGroup.className = 'd-flex gap-2 mb-1';
          
          const callButton = document.createElement('a');
          callButton.className = 'btn btn-success flex-grow-1';
          callButton.href = `tel:` + resource.tel.replace(/[^0-9]+/g, '');
          callButton.innerHTML = `<i class="bi bi-telephone-fill"></i> Call ${resource.user.username}`;
          contactBtnGroup.appendChild(callButton);
          
          const chatButton = document.createElement('a');
          chatButton.className = 'btn btn-info flex-grow-1';
          chatButton.onclick = () => routeToPrivateChat(userId, resource.user_id);
          chatButton.innerHTML = `<i class="bi bi-chat-left-text-fill"></i> Chat ${resource.user.username}`;
          contactBtnGroup.appendChild(chatButton);
          
          moreElement.appendChild(contactBtnGroup);
          
          const navBtnGroup = document.createElement('div');
          navBtnGroup.className = 'd-flex gap-0 mb-1';
          
          const navigateButton = document.createElement('a');
          navigateButton.className = 'btn btn-primary flex-grow-1';
          navigateButton.onclick = () => {
              window.open(`https://www.google.com/maps/dir/?api=1&destination=${resource.resource_latitude},${resource.resource_longitude}`);
          }
          navigateButton.innerHTML = `<i class="bi bi-geo-alt-fill"></i> Navigate`;
          navBtnGroup.appendChild(navigateButton);
          
          moreElement.appendChild(navBtnGroup);
          resourceElement.appendChild(moreElement);
          
          listElement.appendChild(resourceElement);
          
          resource.distanceElement = distanceText;
          
          resourceElement.onclick = (event) => {
              if (openedResource && openedResource !== moreElement) {
                  openedResource.style.display = 'none';
              }
              moreElement.style.display = moreElement.style.display === 'none' ? 'block' : 'none';
              openedResource = moreElement;
          }
      });

      try {
          const position = await getLocation();
          const userLatitude = position.coords.latitude;
          const userLongitude = position.coords.longitude;

          resources.forEach(resource => {
              if (userLatitude !== 0 && userLongitude !== 0 &&
                  resource.resource_latitude !== 0 && resource.resource_longitude !== 0) {
                  const distance = calculateDistance(userLatitude, userLongitude, resource.resource_latitude, resource.resource_longitude);
                  resource.distanceElement.textContent = `${distance} mi`;
              } else {
                  resource.distanceElement.textContent = '';
              }
          });
      } catch (error) {
          resources.forEach(resource => {
              resource.distanceElement.textContent = ' ';
          });
          console.error('Error getting location: ', error);
      }
  }

  function loadTypeDetails(typeId) {
      fetch(`/resource/details?typeId=${typeId}`)
          .then(response => response.json())
          .then(data => {
              console.log(data);
              displayResources(data.data);
          })
          .catch(error => console.error('Error loading resource details:', error));
  }
  
  function showOverlay() {
    document.getElementById('overlayForTest').style.display = 'flex';
  }

  function hideOverlay() {
    document.getElementById('overlayForTest').style.display = 'none';
  }

  socket.on("testMode", () => {
        showOverlay();
  });

  socket.on("testFinish", () => {
        hideOverlay();
  });
  
  socket.on("inactive", () => {
    alert("your account is changed to Inactive by a Adminitrator. You will be logged out.");
    logout();
  })
