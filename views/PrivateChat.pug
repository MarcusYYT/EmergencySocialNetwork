doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
  link(rel='stylesheet' type='text/css' href='/stylesheets/index.css')
  script(src='/javascripts/posts.js')

  title Private Chat
.links
  a.btn.btn-primary(onclick='routeToDirectory()') Back
#post-wrapper
  h2#message-header
  form.search-form.input-group.mb-3(onsubmit="submitSearch()" onchange="searchFinished()")
    input.search-input.form-control(type='text', name='search', placeholder='Search...')
  #message-board.list-group
  form#post-form(method='POST')
    textarea#message(placeholder='Type your message here...' required='')
    button#post-btn.btn.btn-primary(type='button' onclick='postChatMessage()') Post
#overlayForTest(style='display: none;')
    p Currently Speed Testing... 
    p Don't Close the Browser Tab...
script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

    const socket = io();

    let senderUsername = "";
    let receiverUsername = "";
    let status = "";

    socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const senderId = #{senderId};
        const receiverId = #{receiverId};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: senderId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
        await fetch(`/sockets`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({sender_id: senderId, receiver_id: receiverId, socket_id: socket.id, operation:'joinRoom'})})
            .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error creating socket room:', error);
            });
    });

    function filterStopWords(userInput){
        const stopWords = [
        "a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be",
        "because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every",
        "for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in",
        "into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither",
        "no","nor","not","of","off","often","on","only","or","other","our","own","rather","said","say","says","she",
        "should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis",
        "to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why",
        "will","with","would","yet","you","your"
        ];

        let userInputWordArray = userInput.split(/\s+/);

        let filteredInput = userInput;

        for (word of userInputWordArray) {
        if (stopWords.includes(word)) {
            filteredInput = filteredInput.replace(word, "")
        } 
        }

        return filteredInput;
    }

  async function submitSearch(){
    event.preventDefault()

    let searchInput = document.getElementsByClassName('search-input')[0];
    let searchValue = searchInput.value;

    let filteredSearchValue = filterStopWords(searchValue)
    console.log(searchValue)
    console.log(filteredSearchValue)
    let isStatus = false;
    if (filteredSearchValue === "status" || filteredSearchValue === "Status") {
        isStatus = true;
    }
   
    if(filteredSearchValue !== ""){
        if (isStatus) {
            const receiverId = #{receiverId}
            await fetch(`/search?q=${filteredSearchValue}&domain=StatusHistory&receiverId=${receiverId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => response.json()).then(async (data) => {
                console.log("Data in response::")
                console.log(data.data);
                renderSearchedPosts(data.data, true, isStatus)
            }).catch(error => {
                console.error(error);
            })
        }
        else {
            const senderId = #{senderId}
            const receiverId = #{receiverId}
            await fetch(`/search?q=${filteredSearchValue}&domain=PrivatePosts&senderId=${senderId}&receiverId=${receiverId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            }).then(response => response.json()).then(async (data) => {
                console.log("Data in response::")
                console.log(data.data);
                isStatus = false;
                renderSearchedPosts(data.data, true, isStatus)
            }).catch(error => {
                console.error(error);
            })      
        }
    }

    else{
        renderEmptyMessage();
    }
  }

  async function searchFinished(){
        const senderId = #{senderId}
        const receiverId = #{receiverId}

        let searchInput = document.getElementsByClassName('search-input')[0];
        let searchValue = searchInput.value;

        if (searchValue === ""){
          await fetch(`/privatePosts/${senderId}/${receiverId}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                renderChats(data.data, true)
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
        }
      }

    window.onload = async function() {
        const senderId = #{senderId}
        const senderResponse = await fetch(`/users/${senderId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
        }).then(response => response.json()).then((data) => {
            console.log(data.data[0].username);
            senderUsername = data.data[0].username;
            status = data.data[0].status;
        })


        const receiverId = #{receiverId}
        const receiverResponse = await fetch(`/users/${receiverId}`, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
        }).then(response => response.json()).then((data) => {
            console.log(data.data[0].username);
            receiverUsername = data.data[0].username;
            renderReceiverName()
        })

        await fetch(`/privatePosts/${senderId}/${receiverId}`)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                let sortedList = sortByPostId(data.data);
                renderChats(sortedList, true);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });
    }


    function routeToDirectory(){
        const senderId = #{senderId}
        window.location.href = `/directory/${senderId}`
    }

    function renderReceiverName(){
        let header = document.getElementById("message-header")
        let headerText = document.createTextNode(receiverUsername)
        header.appendChild(headerText)
    }
    socket.on("postPrivatePost", (postData) => {
            let messageBoard = document.getElementById("message-board")
            let msgData = {
                sender: postData.sender_name,
                message: postData.content,
                status: postData.status,
                dateTime: postData.dateTime,
            }  
            let messageElement = constructChatMessage(
                msgData
            );
            messageBoard.appendChild(messageElement);
            document.getElementById("message-board").scrollTop = messageBoard.scrollHeight;
    });

    socket.on('alert', function(body) {
        const confirmation = window.confirm("USER \"" + body.username + "\" has send you an EMERGENCY message: \n\"" + body.message + "\"\nClick \"OK\" will redirect you to Google Map of " + body.username + "'s location\nPlease allow redirect permission if nothing happen :)");        
        if (confirmation) {
            //- alert(body.username + " 's current location is : \n" + body.link)
            window.open(body.link);
        } else {
            console.log('User clicked Cancel');
        }
      });

    window.addEventListener('beforeunload', async function (event) {
    // Call the markMessagesAsRead API
    // Assuming you have a function to make the API request
    try {
        const senderId = #{senderId}
        const receiverId = #{receiverId}
        await fetch(`/privatePosts/${senderId}/${receiverId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({}),
          })
        console.log('Messages marked as read');
    } catch (error) {
        console.error('Error marking messages as read:', error);
    }

    // Optionally, you can use the event's returnValue to show a confirmation dialog
    // event.returnValue = 'Are you sure you want to leave?';
    });
    async function postChatMessage(){
        let textArea = document.getElementById("message")
        let textContent = textArea.value
        let path = window.location.pathname;
        textArea.value = "";
        // Get the user_id (assuming it's the last part of the URL)

        const sender_id = #{senderId}
        const receiver_id = #{receiverId}

        const postData = {
            sender_name: senderUsername,
            sender_id: sender_id,
            receiver_id: receiver_id,
            status: status,
            dateTime: new Date().toLocaleString(),
            content: textContent
        };

        await fetch('/privatePosts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postData)})
            .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error fetching data:', error);
            });

    }

    function sortByPostId(data) {
        data.sort(function (a, b) {
            return a.post_id - b.post_id;
        })
        return data;
    }

  function showOverlay() {
    document.getElementById('overlayForTest').style.display = 'flex';
  }

  function hideOverlay() {
    document.getElementById('overlayForTest').style.display = 'none';
  }

  socket.on("testMode", () => {
        showOverlay();
  });

  socket.on("testFinish", () => {
        hideOverlay();
  });

