doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css', rel='stylesheet', integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3', crossorigin='anonymous')
    link(rel='stylesheet', href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css')
    title Login - Emergency Social Network
  body.bg-light
    .container.py-5
      .row.justify-content-center
        .col-md-6
          .card.shadow-lg.border-0.rounded-3
            .card-body.p-5
              .text-center.mb-4
                i.fas.fa-hands-helping.text-primary.fa-3x.mb-3
                h2.fw-bold.text-primary Emergency Social Network
                p.text-muted.small Sign in to connect with your community
              
              form#loginForm.login-form(action='/auth/login', method='post')
                .mb-3
                  .input-group
                    span.input-group-text
                      i.fas.fa-user
                    input.form-control(type='text', name='username', placeholder='Username', required)
                
                .mb-3
                  .input-group
                    span.input-group-text
                      i.fas.fa-lock
                    input.form-control(type='password', name='password', placeholder='Password', required)
                
                .d-grid.gap-2.mb-3
                  button#signinbtn.btn.btn-primary.btn-lg(onclick='login()', type='button')
                    i.fas.fa-sign-in-alt.me-2
                    | Login
                
                .d-grid
                  button#registerBtn.btn.btn-outline-secondary(onclick='togglePopUp()', type='button')
                    i.fas.fa-user-plus.me-2
                    | Register
              
              .mt-4.text-center.text-muted.small
                p &copy; 2024 Emergency Social Network

script.
  async function login() {
    let form = document.getElementById('loginForm');
    let username = form.username.value.trim().toLowerCase();
    let password = form.password.value.trim();
    
    try {
        const response = await fetch('/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ username: username, password: password }),
        });
        if (response.status === 404) {
            togglePopUp();
        } else {
            const data = await response.json();
            if (data.success && data.token) {
                document.cookie = `token=${data.token};max-age=3600;path=/`;
                window.location.href = `/directory/${data.user_id}`;
            } else {
                alert(data.message);
            }
        }
    } catch (error) {
        console.error('Login failed:', error);
    }
  }
  
  async function register() {
    let form = document.getElementById('loginForm');
    let username = form.username.value.trim().toLowerCase();
    let password = form.password.value.trim();
    if (username.length < 3) {
      alert("The username must be at least 3 characters long");
      return false;
    }
    if (password.length < 4) {
      alert("The password has to be at least 4 characters long");
      return false;
    }
    if (password === "" || username === "") {
      alert("Any input field cannot be empty");
      return false;
    }
    await fetch('/auth/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username: username, password:password }),
    }).then(response => response.json()
    ).then((data)=>{
      if(data.success && data.token){
          alert(data.message)
          console.log(data.user_id);
          document.cookie = `token=${data.token};max-age=3600;path=/`;
          window.location.href = `/directory/${data.user_id}`;
      } else {
          alert(data.message)
      }
    });
  }

  function togglePopUp(){
    let wrapper = document.querySelector('body');

    let welcomeWrapper = document.createElement('div');
    welcomeWrapper.setAttribute("class", "welcome-wrapper position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center");
    welcomeWrapper.style.zIndex = "1050";
    
    let div = document.createElement('div');
    div.setAttribute("class", "alert alert-primary shadow-lg border-0 rounded-3 p-4 mx-3");
    div.setAttribute("role", "alert");
    div.style.maxWidth = "500px";

    let heading = document.createElement('h4');
    heading.setAttribute("class", "alert-heading fw-bold mb-3");
    let headingText = document.createTextNode("Welcome!");
    heading.appendChild(headingText);

    let msg = document.createElement('p');
    let msgText = document.createTextNode("Welcome to become a new member of Citizen! There are three kind of status for you to share with other member of Citizen: green means you are okay and you do not need help; yellow means you need help but it is not an emergency; red means you need help ASAP! You can change your status as needed!");
    msg.appendChild(msgText);

    let buttonWrapper = document.createElement('div');
    buttonWrapper.setAttribute("class", "d-flex gap-2 mt-4");
    
    let acknowledgeBtn = document.createElement('button');
    acknowledgeBtn.setAttribute("class", "btn btn-primary");
    acknowledgeBtn.setAttribute("id", "ack-btn");
    let acknowledgeBtnText = document.createTextNode("I accept");
    acknowledgeBtn.appendChild(acknowledgeBtnText);

    let cancelBtn = document.createElement('button');
    cancelBtn.setAttribute("class", "btn btn-outline-secondary");
    cancelBtn.setAttribute("id", "cancel-btn");
    let cancelBtnText = document.createTextNode("Cancel");
    cancelBtn.appendChild(cancelBtnText);

    div.appendChild(heading);
    div.appendChild(msg);
    buttonWrapper.appendChild(acknowledgeBtn);
    buttonWrapper.appendChild(cancelBtn);
    div.appendChild(buttonWrapper);
    welcomeWrapper.appendChild(div);

    let overlay = document.createElement('div');
    overlay.setAttribute("id", "overlay");
    overlay.setAttribute("class", "position-fixed top-0 start-0 w-100 h-100 bg-dark");
    overlay.style.opacity = "0.5";
    overlay.style.zIndex = "1040";
    
    wrapper.appendChild(overlay);
    wrapper.appendChild(welcomeWrapper);

    acknowledgeBtn.addEventListener("click", async (event) => {
      await register();
      wrapper.removeChild(welcomeWrapper);
      wrapper.removeChild(overlay);
    });

    cancelBtn.addEventListener("click", async (event) => {
      wrapper.removeChild(welcomeWrapper);
      wrapper.removeChild(overlay);
    });
  }
