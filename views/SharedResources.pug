doctype html
head
  meta(charset='UTF-8')
  meta(name='viewport' content='width=device-width, initial-scale=1.0')
  link(href='https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3' crossorigin='anonymous')
  link(rel='stylesheet', href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css')
  link(rel='stylesheet' type='text/css' href='/stylesheets/index.css')
  script(src='/javascripts/resources.js')
  title My Shared Resources
.links
  a.btn.btn-primary(onclick='routeToShared()') Back
#post-wrapper
    h2#message-header My Shared Resources
    button.btn.btn-primary.custom-button.btn-lg(onclick='routeToCreate();' style='width: 355px; border-radius: 10px; margin: 10px;') Share New Resource
    #announcement-board
        #resourceList.resource-list
script(src='https://cdn.socket.io/4.7.4/socket.io.min.js')
script.

  const socket = io();
  socket.on('connect', async function() {
        console.log('Connected to server');
        console.log('Socket ID:', socket.id);
        const userId = #{user_id};
        await fetch(`/sockets`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({user_id: userId, socket_id: socket.id, operation:'register'})})
                .then(response => response.json())
            .then(data => {
                console.log(data);
            })
            .catch(error => {
                console.error('Error register socket:', error);
            });
  })
  let username = "";

  function routeToShared(){
    const user_id = #{user_id}
    window.location.href = `/resources/${user_id}`
  }


  window.onload = async function() {
    const userId = #{user_id}
    const response = await fetch(`/users/${userId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    }).then(response => response.json()).then((data) => {
      console.log(data.data[0].username);
      username = data.data[0].username;
    })

    await fetch(`/resource/list/${userId}`)
         .then(response => response.json())
         .then(data => {
             console.log(data);
             // renderAnnouncements(data.data)
             displayResources(data.data)
         })
         .catch(error => {
             console.error('Error fetching data:', error);
         });
  }

  async function logout(){
    const userId = #{user_id};
    const requestBody = {
      user_id: userId,
      updateAt: "online_status",
      updateValue: "offline"
    }

    await fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
      }).then(response=> response.json()).then((data)=>{
        console.log(data.message)
      })
      window.location.href = `/`;
  }

  function routeToCreate() {
      const user_id = #{user_id};
      window.location.href = `/resources/shared/create/${user_id}`;
  }


  async function displayResources(resources) {
      const listElement = document.getElementById('resourceList'); // This should be the id of your container element

      // Clear any existing content
      listElement.innerHTML = '';

      resources.forEach(resource => {
          const resourceElement = document.createElement('div');
          resourceElement.className = 'resource-item';
          resourceElement.onclick = function () {
              window.location.href = `/resources/shared/edit/${resource.resource_id}`;
          }

          const cardBody = document.createElement('div');
          cardBody.style.display = 'flex';
          cardBody.style.justifyContent = 'space-between';

          const nameElement = document.createElement('h4');
          nameElement.textContent = `${resource.resource_name} (${resource.resource_amount} ${resource.resource_unit.name})`;
          cardBody.appendChild(nameElement);
          const distanceText = document.createElement('p');
          distanceText.className = 'card-text';
          distanceText.textContent = 'locating...'; // placeholder
          cardBody.appendChild(distanceText);
          resourceElement.appendChild(cardBody);

          const typeElement = document.createElement('p');
          typeElement.textContent = resource.resource_type.name;
          typeElement.className = 'card-text';
          resourceElement.appendChild(typeElement);
          // If you want to add more details like notes or the user who shared the resource, continue appending elements here.

          listElement.appendChild(resourceElement);
          resource.distanceElement = distanceText;
      });

      try {
          const position = await getLocation();
          const userLatitude = position.coords.latitude;
          const userLongitude = position.coords.longitude;

          resources.forEach(resource => {
              if (userLatitude !== 0 && userLongitude !== 0 &&
                  resource.resource_latitude !== 0 && resource.resource_longitude !== 0) {
                  const distance = calculateDistance(userLatitude, userLongitude, resource.resource_latitude, resource.resource_longitude);
                  resource.distanceElement.textContent = `${distance} mi`;
              } else {
                  resource.distanceElement.textContent = '';
              }
          });
      } catch (error) {
          resources.forEach(resource => {
              resource.distanceElement.textContent = ' ';
          });
          console.error('Error getting location: ', error);
      }
  }
